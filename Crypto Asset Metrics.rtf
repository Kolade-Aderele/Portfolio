{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red20\green67\blue174;\red255\green255\blue254;\red46\green49\blue51;
\red24\green25\blue27;\red77\green80\blue85;\red186\green6\blue115;\red162\green0\blue16;\red18\green115\blue126;
}
{\*\expandedcolortbl;;\cssrgb\c9412\c35294\c73725;\cssrgb\c100000\c100000\c99608;\cssrgb\c23529\c25098\c26275;
\cssrgb\c12549\c12941\c14118;\cssrgb\c37255\c38824\c40784;\cssrgb\c78824\c15294\c52549;\cssrgb\c70196\c7843\c7059;\cssrgb\c3529\c52157\c56863;
}
\margl1440\margr1440\vieww28600\viewh15060\viewkind0
\deftab720
\pard\pardeftab720\sl400\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 function\cf4 \strokec4  \cf5 \strokec5 onOpen\cf4 \strokec4 () \{\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf4 \cb3   \cf6 \strokec6 // This function runs a few tasks when the google sheet is opened or refreshed.\cf4 \cb1 \strokec4 \
\
\cb3   \cf6 \strokec6 // Next few lines creates a menu of tasks:\cf4 \cb1 \strokec4 \
\
\cb3   \cf6 \strokec6 // first retreived the user interface of the google sheet\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 ui\cf4 \strokec4  = \cf7 \strokec7 SpreadsheetApp\cf4 \strokec4 .\cf5 \strokec5 getUi\cf4 \strokec4 ();\cb1 \
\
\cb3   \cf6 \strokec6 // Then create the menu\cf4 \cb1 \strokec4 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 ui\cf4 \strokec4 .\cf5 \strokec5 createMenu\cf4 \strokec4 (\cf8 \strokec8 'Get Asset Data from Messari'\cf4 \strokec4 )\cb1 \
\cb3      \cb1 \
\cb3    \cf6 \strokec6 // add items to the menu\cf4 \cb1 \strokec4 \
\
\cb3    \cf6 \strokec6 // add the callAsset Data function to the menu.    \cf4 \cb1 \strokec4 \
\cb3       .\cf5 \strokec5 addItem\cf4 \strokec4 (\cf8 \strokec8 'Get Asset Data'\cf4 \strokec4 ,\cf8 \strokec8 'callAssetData'\cf4 \strokec4 )\cb1 \
\cb3       .\cf5 \strokec5 addToUi\cf4 \strokec4 ();\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 //displays a welcome message\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf4 \cb3   \cf7 \strokec7 Browser\cf4 \strokec4 .\cf5 \strokec5 msgBox\cf4 \strokec4 (\cf8 \strokec8 "Welcome Message and Instructions"\cf4 \strokec4 , \cf8 \strokec8 "Welcome to the Crypto Assets Metrics Google Sheet. This sheet imports the historical price, trade volume and market capitalization data for the speicifed asset within the specified period. \\\\n \\\\n Here are a few instructions on how to operate the spreadsheet: \\\\n 1. Query the data by entering the inputs in the sections that have a Yellow background color and Blue font color. \\\\n 2. Click on 'Get Asset Data from Messari' and then 'Get Asset Data' to run the function that imports the required data for the speicified asset in the specified date range.\\\\n 3. Please do not alter, insert, delete or shift columns or data in the spreadsheet. Doing so would require altering the code in the backend of the spreadsheet. \\\\n 4. Click on 'Extensions' then 'Apps Script' to access the developer environment that stores the backend code."\cf4 \strokec4 , \cf7 \strokec7 Browser\cf4 \strokec4 .\cf7 \strokec7 Buttons\cf4 \strokec4 .\cf7 \strokec7 OK\cf4 \strokec4 )\cb1 \
\
\cb3 \}\cb1 \
\
\
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 function\cf4 \strokec4  \cf5 \strokec5 callAssetData\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\sl400\partightenfactor0
\cf4 \cb3   \cf6 \strokec6 // This function retreives the historical Price, Trade Volume and Market Cap time series data for an asset from a certain start date to the end date\cf4 \cb1 \strokec4 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 // In this function we are going to use the callAsset_Price, callAsset_Trade_Volume and the callAsset_Market_Cap functions.\cf4 \cb1 \strokec4 \
\
\cb3   \cf6 \strokec6 // Start with the callAsset_Price function to import the asset's Date, Open Price, High Price, Low Price and Close Price data into the spreadsheet.\cf4 \cb1 \strokec4 \
\
\cb3   \cf5 \strokec5 callAsset_Price\cf4 \strokec4 ()\cb1 \
\
\cb3   \cf6 \strokec6 // Next use the callAsset_Trade_Volume function to import the asset's Trade Volume data into the spreadsheet.\cf4 \cb1 \strokec4 \
\
\cb3   \cf5 \strokec5 callAsset_Trade_Volume\cf4 \strokec4 ()\cb1 \
\
\cb3   \cf6 \strokec6 // Next use the callAsset_Market_Capitalization function to import the asset's Market Capitalization data into the spreadsheet.\cf4 \cb1 \strokec4 \
\
\cb3   \cf5 \strokec5 callAsset_Market_Cap\cf4 \strokec4 ()\cb1 \
\
\cb3  \cf6 \strokec6 // That is the end of the function.\cf4 \cb1 \strokec4 \
\
\cb3 \}\cb1 \
\
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 function\cf4 \strokec4  \cf5 \strokec5 callAsset_Price\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // This function retrieves the historical open, high, low and close price data for an asset for a specified period.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // First retrieve the spreadsheet (google sheet) we want to work on. The name of the google sheet is the Crypto Assets Metrics.  \cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // To do that we first get the active spreadsheet \cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 app\cf4 \strokec4  = \cf7 \strokec7 SpreadsheetApp\cf4 \strokec4 ;\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next we get the active google sheet " Crypto Asset Metrics" and stores it in a variable get_active_spreadsheet.\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 get_active_spreadsheet\cf4 \strokec4  = \cf5 \strokec5 app\cf4 \strokec4 .\cf5 \strokec5 getActiveSpreadsheet\cf4 \strokec4 ();\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // get the worksheet we will be working on. The name of the worksheet is "Model". Hence we will get the Model worksheet and store it in the variable get_model\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 get_model\cf4 \strokec4  = \cf5 \strokec5 get_active_spreadsheet\cf4 \strokec4 .\cf5 \strokec5 getSheetByName\cf4 \strokec4 (\cf8 \strokec8 "Model"\cf4 \strokec4 )\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next we are going to clear the previous data in the range we are going to update\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 /* The next line clears the data in the range we are working with. The purpose is that before we source the data we are going to clear any data already existing in those rows. \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 This particular line clears the data in the Open, High, Low, Close sections of the Model worksheet */\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf5 \cb3 \strokec5 get_model\cf4 \strokec4 .\cf5 \strokec5 getRange\cf4 \strokec4 (\cf9 \strokec9 12\cf4 \strokec4 ,\cf9 \strokec9 2\cf4 \strokec4 ,\cf9 \strokec9 1500\cf4 \strokec4 ,\cf9 \strokec9 5\cf4 \strokec4 ).\cf5 \strokec5 clearContent\cf4 \strokec4 ()\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next we are going to work on importing the Asset's price data by calling/ pulling the data from Messari's "Get Asset Timeseries API".\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // First we are going to pull the appropriate input's from the input section of the data set. \cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 /* The data we need inputted from the Model worksheet is the Asset's Ticker, Start Date and End Date. We are going to import this data and store it in their individual/ respective variables. \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 We are going to use those inputs to form the Messari's API. That is they are going to be used to call the data from the appropriate API. We need to verify that the datatype of the inputs we retreive are Strings\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 Hence we are going to confirm the data type. If they are not Strings we are going to convert the data to Strings. */\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // First we will start by retreiving the Asset's Ticker input and store it in the variable get_ticker\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 get_ticker\cf4 \strokec4  = \cf5 \strokec5 get_model\cf4 \strokec4 .\cf5 \strokec5 getRange\cf4 \strokec4 (\cf8 \strokec8 "C5"\cf4 \strokec4 ).\cf5 \strokec5 getValue\cf4 \strokec4 ();\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next use the Logger.log function we are going to log the data type of the Asset Ticker.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // Logger.log(typeof get_ticker)\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // Next we are going to get the Start Date input and store it in the variable get_start\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 get_start\cf4 \strokec4  = \cf5 \strokec5 get_model\cf4 \strokec4 .\cf5 \strokec5 getRange\cf4 \strokec4 (\cf8 \strokec8 "D5"\cf4 \strokec4 ).\cf5 \strokec5 getValue\cf4 \strokec4 ();\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next use the Logger.log function we are going to log the data type of the Start Date.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // Logger.log(typeof get_start)\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 /// Next we are going to get the End Date input and store it in the variable get_end\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 get_end\cf4 \strokec4  = \cf5 \strokec5 get_model\cf4 \strokec4 .\cf5 \strokec5 getRange\cf4 \strokec4 (\cf8 \strokec8 "E5"\cf4 \strokec4 ).\cf5 \strokec5 getValue\cf4 \strokec4 ();\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next use the Logger.log function we are going to log the data type of the End Date.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // Logger.log(typeof get_end)\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // Next we are going to use the get_ticker, get_start and get_end variables to source the data from messari. We are going to store the pulled data in the variable data_source\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 data_source\cf4 \strokec4  = \cf7 \strokec7 UrlFetchApp\cf4 \strokec4 .\cf5 \strokec5 fetch\cf4 \strokec4 (\cf8 \strokec8 "https://data.messari.io/api/v1/assets/"\cf4 \strokec4  + \cf5 \strokec5 get_ticker\cf4 \strokec4  +\cf8 \strokec8 "/metrics/price/time-series?start="\cf4 \strokec4  + \cf5 \strokec5 get_start\cf4 \strokec4  + \cf8 \strokec8 "&interval=1d&end="\cf4 \strokec4  + \cf5 \strokec5 get_end\cf4 \strokec4 );\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next we are going to log the data source to check if the data we got was correct.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // Logger.log(" ")\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // Logger.log(data_source)\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // In the next two steps we are going to retreive the content of the API then parse it into JSON which would allow us to work on the content of the API.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // First we retreive the content of the API and store it in the variable data_source_content.\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 data_source_content\cf4 \strokec4  = \cf5 \strokec5 data_source\cf4 \strokec4 .\cf5 \strokec5 getContentText\cf4 \strokec4 ();\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next we parse the data and store the result in the variable data_source_result.\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 data_source_result\cf4 \strokec4  = \cf7 \strokec7 JSON\cf4 \strokec4 .\cf5 \strokec5 parse\cf4 \strokec4 (\cf5 \strokec5 data_source_content\cf4 \strokec4 );\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Since we want the data to display in descending order from End Date to Start Date we ae going to reverse the order of the result and store the data in the variable data_source_reverse_order\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 data_source_reverse_order\cf4 \strokec4  = \cf5 \strokec5 data_source_result\cf4 \strokec4 .\cf5 \strokec5 data\cf4 \strokec4 .\cf5 \strokec5 values\cf4 \strokec4 .\cf5 \strokec5 reverse\cf4 \strokec4 ()\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // The above function reverses the order of the values array. \cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 /* The next few steps we are going to start outputting the data in the respective positions on the Model worksheet. We are going to create a variable outer_looper to loop through the outer array.\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 That will allow us to get the line by line data. Next we are going to create Date, Open, High, Low and Close loops to get the respective data based on the index position in the inner array. \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 The Date is the first in the array so the index position is 0, The Open index position is 1, High index position is 2, Low index position is 3 and Close index position is 4. \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 For now we are going to ignore the volume which is the trade volume data which has an index position of 5.Also note that Date is currently store in the timestamp format and we are going to work on changing the format. */\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // creating the outer_looper\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 outer_looper\cf4 \strokec4  = \cf9 \strokec9 0\cf4 \strokec4 ;\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Looping through the outer array\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl400\partightenfactor0
\cf4 \cb3  \cb1 \
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 for\cf4 \strokec4  (\cf5 \strokec5 outer_looper\cf4 \strokec4  = \cf9 \strokec9 0\cf4 \strokec4 ; \cf5 \strokec5 outer_looper\cf4 \strokec4  < \cf5 \strokec5 data_source_reverse_order\cf4 \strokec4 .\cf5 \strokec5 length\cf4 \strokec4 ; \cf5 \strokec5 outer_looper\cf4 \strokec4 ++) \{\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next we are going to create variables for Date, Open, High, Low and Close data points to get the respective values from the inner array.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // We are going to start with the date, create a variable date_looper.\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 date_looper\cf4 \strokec4  = \cf9 \strokec9 0\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next we are going to output the variable in the respect position in the spreadsheet and change the format from timestamp to date.\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 if\cf4 \strokec4  (\cf5 \strokec5 date_looper\cf4 \strokec4  === \cf9 \strokec9 0\cf4 \strokec4 ) \cf5 \strokec5 get_model\cf4 \strokec4 .\cf5 \strokec5 getRange\cf4 \strokec4 ( \cf5 \strokec5 outer_looper\cf4 \strokec4  + \cf9 \strokec9 12\cf4 \strokec4  ,\cf5 \strokec5 date_looper\cf4 \strokec4 +\cf9 \strokec9 2\cf4 \strokec4 ).\cf5 \strokec5 setValue\cf4 \strokec4 (\cf2 \strokec2 new\cf4 \strokec4  \cf7 \strokec7 Date\cf4 \strokec4 (\cf5 \strokec5 data_source_reverse_order\cf4 \strokec4 [\cf5 \strokec5 outer_looper\cf4 \strokec4 ][\cf5 \strokec5 date_looper\cf4 \strokec4 ]));\cb1 \
\
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next we are going to output the Open price. We create a variable open_looper\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 open_looper\cf4 \strokec4  = \cf9 \strokec9 1\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 if\cf4 \strokec4 (\cf5 \strokec5 open_looper\cf4 \strokec4  === \cf9 \strokec9 1\cf4 \strokec4 ) \cf5 \strokec5 get_model\cf4 \strokec4 .\cf5 \strokec5 getRange\cf4 \strokec4 (\cf5 \strokec5 outer_looper\cf4 \strokec4  + \cf9 \strokec9 12\cf4 \strokec4 , \cf5 \strokec5 open_looper\cf4 \strokec4  + \cf9 \strokec9 2\cf4 \strokec4  ).\cf5 \strokec5 setValue\cf4 \strokec4 (\cf5 \strokec5 data_source_reverse_order\cf4 \strokec4 [\cf5 \strokec5 outer_looper\cf4 \strokec4 ][\cf5 \strokec5 open_looper\cf4 \strokec4 ])\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next we are going to output the High price. We create a variable high_looper\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 high_looper\cf4 \strokec4  = \cf9 \strokec9 2\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 if\cf4 \strokec4 (\cf5 \strokec5 high_looper\cf4 \strokec4  === \cf9 \strokec9 2\cf4 \strokec4 ) \cf5 \strokec5 get_model\cf4 \strokec4 .\cf5 \strokec5 getRange\cf4 \strokec4 (\cf5 \strokec5 outer_looper\cf4 \strokec4  + \cf9 \strokec9 12\cf4 \strokec4 , \cf5 \strokec5 high_looper\cf4 \strokec4  + \cf9 \strokec9 2\cf4 \strokec4  ).\cf5 \strokec5 setValue\cf4 \strokec4 (\cf5 \strokec5 data_source_reverse_order\cf4 \strokec4 [\cf5 \strokec5 outer_looper\cf4 \strokec4 ][\cf5 \strokec5 high_looper\cf4 \strokec4 ])\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next we are going to output the Low price. We create a variable low_looper\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 low_looper\cf4 \strokec4  = \cf9 \strokec9 3\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 if\cf4 \strokec4 (\cf5 \strokec5 low_looper\cf4 \strokec4  === \cf9 \strokec9 3\cf4 \strokec4 ) \cf5 \strokec5 get_model\cf4 \strokec4 .\cf5 \strokec5 getRange\cf4 \strokec4 (\cf5 \strokec5 outer_looper\cf4 \strokec4  + \cf9 \strokec9 12\cf4 \strokec4 , \cf5 \strokec5 low_looper\cf4 \strokec4  + \cf9 \strokec9 2\cf4 \strokec4  ).\cf5 \strokec5 setValue\cf4 \strokec4 (\cf5 \strokec5 data_source_reverse_order\cf4 \strokec4 [\cf5 \strokec5 outer_looper\cf4 \strokec4 ][\cf5 \strokec5 low_looper\cf4 \strokec4 ])\cb1 \
\
\
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next we are going to output the Close price. We create a variable close_looper\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 close_looper\cf4 \strokec4  = \cf9 \strokec9 4\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 if\cf4 \strokec4 (\cf5 \strokec5 close_looper\cf4 \strokec4  === \cf9 \strokec9 4\cf4 \strokec4 ) \cf5 \strokec5 get_model\cf4 \strokec4 .\cf5 \strokec5 getRange\cf4 \strokec4 (\cf5 \strokec5 outer_looper\cf4 \strokec4  + \cf9 \strokec9 12\cf4 \strokec4 , \cf5 \strokec5 close_looper\cf4 \strokec4  + \cf9 \strokec9 2\cf4 \strokec4  ).\cf5 \strokec5 setValue\cf4 \strokec4 (\cf5 \strokec5 data_source_reverse_order\cf4 \strokec4 [\cf5 \strokec5 outer_looper\cf4 \strokec4 ][\cf5 \strokec5 close_looper\cf4 \strokec4 ])\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf4 \cb3 \}\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // That is the end of this function. \cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf4 \cb3 \}\cb1 \
\
\
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 function\cf4 \strokec4  \cf5 \strokec5 callAsset_Trade_Volume\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // This function retrieves the historical Trade Volume data for an asset for a specified period.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // First retrieve the spreadsheet (google sheet) we want to work on. The name of the google sheet is the Crypto Assets Metrics.  \cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // To do that we first get the active spreadsheet \cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 app\cf4 \strokec4  = \cf7 \strokec7 SpreadsheetApp\cf4 \strokec4 ;\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next we get the active google sheet " Crypto Asset Metrics" and stores it in a variable get_active_spreadsheet.\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 get_active_spreadsheet\cf4 \strokec4  = \cf5 \strokec5 app\cf4 \strokec4 .\cf5 \strokec5 getActiveSpreadsheet\cf4 \strokec4 ();\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // get the worksheet we will be working on. The name of the worksheet is "Model". Hence we will get the Model worksheet and store it in the variable get_model\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 get_model\cf4 \strokec4  = \cf5 \strokec5 get_active_spreadsheet\cf4 \strokec4 .\cf5 \strokec5 getSheetByName\cf4 \strokec4 (\cf8 \strokec8 "Model"\cf4 \strokec4 )\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next we are going to clear the previous data in the range we are going to update\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 /* The next line clears the data in the range we are working with. The purpose is that before we source the data we are going to clear any data already existing in those rows. \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 This particular line clears the data in the Open, High, Low, Close sections of the Model worksheet */\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf5 \cb3 \strokec5 get_model\cf4 \strokec4 .\cf5 \strokec5 getRange\cf4 \strokec4 (\cf9 \strokec9 12\cf4 \strokec4 ,\cf9 \strokec9 8\cf4 \strokec4 ,\cf9 \strokec9 1500\cf4 \strokec4 ,\cf9 \strokec9 1\cf4 \strokec4 ).\cf5 \strokec5 clearContent\cf4 \strokec4 ()\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next we are going to work on importing the Asset's trade volume data by calling/ pulling the data from Messari's "Get Asset Timeseries API".\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // First we are going to pull the appropriate input's from the input section of the data set. \cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 /* The data we need inputted from the Model worksheet is the Asset's Ticker, Start Date and End Date. We are going to import this data and store it in their individual/ respective variables. \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 We are going to use those inputs to form the Messari's API. That is they are going to be used to call the data from the appropriate API. We need to verify that the datatype of the inputs we retreive are Strings\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 Hence we are going to confirm the data type. If they are not Strings we are going to convert the data to Strings. */\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // First we will start by retreiving the Asset's Ticker input and store it in the variable get_ticker\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 get_ticker\cf4 \strokec4  = \cf5 \strokec5 get_model\cf4 \strokec4 .\cf5 \strokec5 getRange\cf4 \strokec4 (\cf8 \strokec8 "C5"\cf4 \strokec4 ).\cf5 \strokec5 getValue\cf4 \strokec4 ();\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next use the Logger.log function we are going to log the data type of the Asset Ticker.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // Logger.log(typeof get_ticker)\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // Next we are going to get the Start Date input and store it in the variable get_start\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 get_start\cf4 \strokec4  = \cf5 \strokec5 get_model\cf4 \strokec4 .\cf5 \strokec5 getRange\cf4 \strokec4 (\cf8 \strokec8 "D5"\cf4 \strokec4 ).\cf5 \strokec5 getValue\cf4 \strokec4 ();\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next use the Logger.log function we are going to log the data type of the Start Date.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // Logger.log(typeof get_start)\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 /// Next we are going to get the End Date input and store it in the variable get_end\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 get_end\cf4 \strokec4  = \cf5 \strokec5 get_model\cf4 \strokec4 .\cf5 \strokec5 getRange\cf4 \strokec4 (\cf8 \strokec8 "E5"\cf4 \strokec4 ).\cf5 \strokec5 getValue\cf4 \strokec4 ();\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next use the Logger.log function we are going to log the data type of the End Date.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // Logger.log(typeof get_end)\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 /* Next we are going to use the get_ticker, get_start and get_end variables to source the data from messari. We are going to store the pulled data in the variable data_source\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 Note we are using the real.vol API to assess the trade volume free of any wash trading. It is well known that many exchanges conduct wash trading practices in order to inflate \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 trading volume. They are incentivized to report inflated volumes in order to attract traders.*/\cf4 \cb1 \strokec4 \
\
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 data_source\cf4 \strokec4  = \cf7 \strokec7 UrlFetchApp\cf4 \strokec4 .\cf5 \strokec5 fetch\cf4 \strokec4 (\cf8 \strokec8 "https://data.messari.io/api/v1/assets/"\cf4 \strokec4  + \cf5 \strokec5 get_ticker\cf4 \strokec4  +\cf8 \strokec8 "/metrics/real.vol/time-series?start="\cf4 \strokec4  + \cf5 \strokec5 get_start\cf4 \strokec4  + \cf8 \strokec8 "&interval=1d&end="\cf4 \strokec4  + \cf5 \strokec5 get_end\cf4 \strokec4 );\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next we are going to log the data source to check if the data we got was correct.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // Logger.log(" ")\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // Logger.log(data_source)\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // In the next two steps we are going to retreive the content of the API then parse it into JSON which would allow us to work on the content of the API.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // First we retreive the content of the API and store it in the variable data_source_content.\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 data_source_content\cf4 \strokec4  = \cf5 \strokec5 data_source\cf4 \strokec4 .\cf5 \strokec5 getContentText\cf4 \strokec4 ();\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next we parse the data and store the result in the variable data_source_result.\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 data_source_result\cf4 \strokec4  = \cf7 \strokec7 JSON\cf4 \strokec4 .\cf5 \strokec5 parse\cf4 \strokec4 (\cf5 \strokec5 data_source_content\cf4 \strokec4 );\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Since we want the data to display in descending order from End Date to Start Date we ae going to reverse the order of the result and store the data in the variable data_source_reverse_order\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 data_source_reverse_order\cf4 \strokec4  = \cf5 \strokec5 data_source_result\cf4 \strokec4 .\cf5 \strokec5 data\cf4 \strokec4 .\cf5 \strokec5 values\cf4 \strokec4 .\cf5 \strokec5 reverse\cf4 \strokec4 ()\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // The above function reverses the order of the values array. \cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 /* The next few steps we are going to start outputting the data in the respective positions on the Model worksheet. We are going to create a variable outer_looper to loop through the outer array.\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 That will allow us to get the line by line data. Next we are going to create a trade_looper to get the retreive the trade volume data based on the index position in the inner array. \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 The Date is the first in the array so the index position is 0 and since we have already retreived the date in the callAsset_Price function we are going to ignore this data point. The index position for the trade volume data in the inner array is 1.*/\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // creating the outer_looper\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 outer_looper\cf4 \strokec4  = \cf9 \strokec9 0\cf4 \strokec4 ;\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Looping through the outer array\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl400\partightenfactor0
\cf4 \cb3  \cb1 \
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 for\cf4 \strokec4  (\cf5 \strokec5 outer_looper\cf4 \strokec4  = \cf9 \strokec9 0\cf4 \strokec4 ; \cf5 \strokec5 outer_looper\cf4 \strokec4  < \cf5 \strokec5 data_source_reverse_order\cf4 \strokec4 .\cf5 \strokec5 length\cf4 \strokec4 ; \cf5 \strokec5 outer_looper\cf4 \strokec4 ++) \{\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next we are going to create variables  for the trade volume data point to get the respective values from the inner array.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // We are going to start with the trade volume, create a variable trade_looper.\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 trade_looper\cf4 \strokec4  = \cf9 \strokec9 1\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next we are going to output the variable in the respect position in the spreadsheet and change the format from timestamp to date.\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 if\cf4 \strokec4  (\cf5 \strokec5 trade_looper\cf4 \strokec4  === \cf9 \strokec9 1\cf4 \strokec4 ) \cf5 \strokec5 get_model\cf4 \strokec4 .\cf5 \strokec5 getRange\cf4 \strokec4 ( \cf5 \strokec5 outer_looper\cf4 \strokec4  + \cf9 \strokec9 12\cf4 \strokec4  ,\cf5 \strokec5 trade_looper\cf4 \strokec4 +\cf9 \strokec9 7\cf4 \strokec4 ).\cf5 \strokec5 setValue\cf4 \strokec4 (\cf5 \strokec5 data_source_reverse_order\cf4 \strokec4 [\cf5 \strokec5 outer_looper\cf4 \strokec4 ][\cf5 \strokec5 trade_looper\cf4 \strokec4 ]);\cb1 \
\
\
\pard\pardeftab720\sl400\partightenfactor0
\cf4 \cb3 \}\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // That is the end of this function. \cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf4 \cb3 \}\cb1 \
\
\
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 function\cf4 \strokec4  \cf5 \strokec5 callAsset_Market_Cap\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // This function retrieves the historical Market Capitalization data for an asset for a specified period.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // First retrieve the spreadsheet (google sheet) we want to work on. The name of the google sheet is the Crypto Assets Metrics.  \cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // To do that we first get the active spreadsheet \cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 app\cf4 \strokec4  = \cf7 \strokec7 SpreadsheetApp\cf4 \strokec4 ;\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next we get the active google sheet " Crypto Asset Metrics" and stores it in a variable get_active_spreadsheet.\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 get_active_spreadsheet\cf4 \strokec4  = \cf5 \strokec5 app\cf4 \strokec4 .\cf5 \strokec5 getActiveSpreadsheet\cf4 \strokec4 ();\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // get the worksheet we will be working on. The name of the worksheet is "Model". Hence we will get the Model worksheet and store it in the variable get_model\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 get_model\cf4 \strokec4  = \cf5 \strokec5 get_active_spreadsheet\cf4 \strokec4 .\cf5 \strokec5 getSheetByName\cf4 \strokec4 (\cf8 \strokec8 "Model"\cf4 \strokec4 )\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next we are going to clear the previous data in the range we are going to update\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 /* The next line clears the data in the range we are working with. The purpose is that before we source the data we are going to clear any data already existing in those rows. \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 This particular line clears the data in the Open, High, Low, Close sections of the Model worksheet */\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf5 \cb3 \strokec5 get_model\cf4 \strokec4 .\cf5 \strokec5 getRange\cf4 \strokec4 (\cf9 \strokec9 12\cf4 \strokec4 ,\cf9 \strokec9 10\cf4 \strokec4 ,\cf9 \strokec9 1500\cf4 \strokec4 ,\cf9 \strokec9 1\cf4 \strokec4 ).\cf5 \strokec5 clearContent\cf4 \strokec4 ()\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next we are going to work on importing the Asset's trade market capitalization data by calling/ pulling the data from Messari's "Get Asset Timeseries API".\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // First we are going to pull the appropriate input's from the input section of the data set. \cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 /* The data we need inputted from the Model worksheet is the Asset's Ticker, Start Date and End Date. We are going to import this data and store it in their individual/ respective variables. \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 We are going to use those inputs to form the Messari's API. That is they are going to be used to call the data from the appropriate API. We need to verify that the datatype of the inputs we retreive are Strings\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 Hence we are going to confirm the data type. If they are not Strings we are going to convert the data to Strings. */\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // First we will start by retreiving the Asset's Ticker input and store it in the variable get_ticker\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 get_ticker\cf4 \strokec4  = \cf5 \strokec5 get_model\cf4 \strokec4 .\cf5 \strokec5 getRange\cf4 \strokec4 (\cf8 \strokec8 "C5"\cf4 \strokec4 ).\cf5 \strokec5 getValue\cf4 \strokec4 ();\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next use the Logger.log function we are going to log the data type of the Asset Ticker.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // Logger.log(typeof get_ticker)\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // Next we are going to get the Start Date input and store it in the variable get_start\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 get_start\cf4 \strokec4  = \cf5 \strokec5 get_model\cf4 \strokec4 .\cf5 \strokec5 getRange\cf4 \strokec4 (\cf8 \strokec8 "D5"\cf4 \strokec4 ).\cf5 \strokec5 getValue\cf4 \strokec4 ();\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next use the Logger.log function we are going to log the data type of the Start Date.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // Logger.log(typeof get_start)\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 /// Next we are going to get the End Date input and store it in the variable get_end\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 get_end\cf4 \strokec4  = \cf5 \strokec5 get_model\cf4 \strokec4 .\cf5 \strokec5 getRange\cf4 \strokec4 (\cf8 \strokec8 "E5"\cf4 \strokec4 ).\cf5 \strokec5 getValue\cf4 \strokec4 ();\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next use the Logger.log function we are going to log the data type of the End Date.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // Logger.log(typeof get_end)\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 /* Next we are going to use the get_ticker, get_start and get_end variables to source the data from messari. We are going to store the pulled data in the variable data_source\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 Note we are using the mcap.out API to assess the market capitalization because it is the sum USD value of the current supply also referred to as network value or market capitalization.*/\cf4 \cb1 \strokec4 \
\
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 data_source\cf4 \strokec4  = \cf7 \strokec7 UrlFetchApp\cf4 \strokec4 .\cf5 \strokec5 fetch\cf4 \strokec4 (\cf8 \strokec8 "https://data.messari.io/api/v1/assets/"\cf4 \strokec4  + \cf5 \strokec5 get_ticker\cf4 \strokec4  +\cf8 \strokec8 "/metrics/mcap.out/time-series?start="\cf4 \strokec4  + \cf5 \strokec5 get_start\cf4 \strokec4  + \cf8 \strokec8 "&interval=1d&end="\cf4 \strokec4  + \cf5 \strokec5 get_end\cf4 \strokec4 );\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next we are going to log the data source to check if the data we got was correct.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // Logger.log(" ")\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // Logger.log(data_source)\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // In the next two steps we are going to retreive the content of the API then parse it into JSON which would allow us to work on the content of the API.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // First we retreive the content of the API and store it in the variable data_source_content.\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 data_source_content\cf4 \strokec4  = \cf5 \strokec5 data_source\cf4 \strokec4 .\cf5 \strokec5 getContentText\cf4 \strokec4 ();\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next we parse the data and store the result in the variable data_source_result.\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 data_source_result\cf4 \strokec4  = \cf7 \strokec7 JSON\cf4 \strokec4 .\cf5 \strokec5 parse\cf4 \strokec4 (\cf5 \strokec5 data_source_content\cf4 \strokec4 );\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Since we want the data to display in descending order from End Date to Start Date we ae going to reverse the order of the result and store the data in the variable data_source_reverse_order\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 data_source_reverse_order\cf4 \strokec4  = \cf5 \strokec5 data_source_result\cf4 \strokec4 .\cf5 \strokec5 data\cf4 \strokec4 .\cf5 \strokec5 values\cf4 \strokec4 .\cf5 \strokec5 reverse\cf4 \strokec4 ()\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // The above function reverses the order of the values array. \cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 /* The next few steps we are going to start outputting the data in the respective positions on the Model worksheet. We are going to create a variable outer_looper to loop through the outer array.\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 That will allow us to get the line by line data. Next we are going to create a mcap_looper to get the retreive the market capitalization data based on the index position in the inner array. \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 The Date is the first in the array so the index position is 0 and since we have already retreived the date in the callAsset_Price function we are going to ignore this data point. The index position for the market capitalization data in the inner array is 1.*/\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // creating the outer_looper\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 outer_looper\cf4 \strokec4  = \cf9 \strokec9 0\cf4 \strokec4 ;\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Looping through the outer array\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl400\partightenfactor0
\cf4 \cb3  \cb1 \
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 for\cf4 \strokec4  (\cf5 \strokec5 outer_looper\cf4 \strokec4  = \cf9 \strokec9 0\cf4 \strokec4 ; \cf5 \strokec5 outer_looper\cf4 \strokec4  < \cf5 \strokec5 data_source_reverse_order\cf4 \strokec4 .\cf5 \strokec5 length\cf4 \strokec4 ; \cf5 \strokec5 outer_looper\cf4 \strokec4 ++) \{\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next we are going to create variables  for the market capitalization data point to get the respective values from the inner array.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 // We are going to start with the market capitalization , create a variable mcap_looper.\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 mcap_looper\cf4 \strokec4  = \cf9 \strokec9 1\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // Next we are going to output the variable in the respect position in the spreadsheet and change the format from timestamp to date.\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec2 if\cf4 \strokec4  (\cf5 \strokec5 mcap_looper\cf4 \strokec4  === \cf9 \strokec9 1\cf4 \strokec4 ) \cf5 \strokec5 get_model\cf4 \strokec4 .\cf5 \strokec5 getRange\cf4 \strokec4 ( \cf5 \strokec5 outer_looper\cf4 \strokec4  + \cf9 \strokec9 12\cf4 \strokec4  ,\cf5 \strokec5 mcap_looper\cf4 \strokec4 +\cf9 \strokec9 9\cf4 \strokec4 ).\cf5 \strokec5 setValue\cf4 \strokec4 (\cf5 \strokec5 data_source_reverse_order\cf4 \strokec4 [\cf5 \strokec5 outer_looper\cf4 \strokec4 ][\cf5 \strokec5 mcap_looper\cf4 \strokec4 ]);\cb1 \
\
\
\pard\pardeftab720\sl400\partightenfactor0
\cf4 \cb3 \}\cb1 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf6 \cb3 \strokec6 // That is the end of this function. \cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf4 \cb3 \}\
\
// Here is a link to the google sheet: https://docs.google.com/spreadsheets/d/1iyL45xPOm9tZeX9E873-LgUjHtE2ZCYZdu4A55FnZwU/edit#gid=0\cb1 \
}